import './App.css';
import { ApiWaiting, Loader, ProtectedRoute } from "./_core/components/index";

import {
  BrowserRouter,
  Routes,
  Route,
  Navigate
} from "react-router-dom";
import { DialogBoxProvider } from './_core/providers/DialogBoxContext';
import { DialogBoxContainer } from './_core/components/DialogBox';
import GlobalStateContext, { GlobalStateProvider } from './_core/providers/GlobalStateContext';
import { BreadCrumbs, MainCommandBar, ToastContainer } from "./_core/components/index"
import { ToastProvider } from './_core/providers/ToastContext';
// import Login from "./_core/screens/Login"
import base_routes from "./_core/base-routes"
import app_routes from "./app/routes"
import React, { useContext, useRef } from 'react';
import AuthContext from './_core/providers/AuthContext';

function App() {
  const auth = useContext(AuthContext);
  let _routes = [];
  let hasRootRef = useRef(false);
  let globalState = useContext(GlobalStateContext);

  hasRootRef.current = app_routes.reduce((acc, cur) => {
    acc = acc || (cur.path === '/')
    return acc
  }, false)

  if (hasRootRef.current) {
    _routes = [...base_routes.filter(item => item.path !== '/'), ...app_routes]
  } else {
    _routes = [...base_routes, ...app_routes]
  }

  return (
    <>
      <DialogBoxProvider>
        <ToastProvider>
          {
            auth.isAuthed &&
            <>
              <ToastContainer />
              <DialogBoxContainer />
            </>
          }
          <div className='flex h-screen '>
            {
              auth.isAuthed &&
              <div className='w-60 bg-gray-900 h-full pt-10 pl-2 text-white text-sm'>
                <div className='py-1 pl-1 hover:bg-gray-800'>Purchase Orders</div>
                <div className='py-1 pl-1 hover:bg-gray-800'>Customer Orders</div>
                {/* <Navigator /> */}
              </div>
            }
            <div className=" w-full">
              {
                auth.isAuthed &&
                <div className='flex justify-between items-center bg-gray-900 px-2 h-10'>
                  <BreadCrumbs />
                  <MainCommandBar />
                </div>
              }
              <div className='overflow-y-auto' style={{ maxHeight: auth.isAuthed ? 'calc(100vh - 40px)' : 'calc(100vh)' }}>
                {(globalState.loadingSource !== null) && <ApiWaiting />}
                <React.Suspense fallback={<Loader />}>
                  <Routes>
                    {
                      Array.isArray(app_routes) && _routes.map((route, index) => {
                        return <Route
                          key={index}
                          path={route.path}
                          element={
                            route.isPrivate ?
                              <ProtectedRoute>
                                <LazyComponent page={route.page} folder={route.folder} />
                              </ProtectedRoute>
                              :
                              <LazyComponent page={route.page} folder={route.folder} />
                          }
                        />
                      })
                    }
                  </Routes>
                </React.Suspense>
              </div>
            </div>
          </div>
        </ToastProvider>
      </DialogBoxProvider>
      {/* 
      <Routes>
        <Route path="/p" element={<PublicAppShell />}>
          {
          _routes.filter(route => !route.isPrivate).map((route,index) => {
          return <Route
            key={index}
            path={route.path}
            element={
              <LazyComponent page={route.page} folder={route.folder} />
            }
          />
          })
          }
        </Route>
        <Route path="/" element={PrivateAppShell />}>
          {
          _routes.filter(route => route.isPrivate).map((route,index) => {
          return <Route
            key={index}
            path={route.path}
            element={
              <ProtectedRoute>
                <LazyComponent page={route.page} folder={route.folder} />
              </ProtectedRoute>
            }
          />
          })
          }
        </Route>
      </Routes>
      */}
    </>
  );
}

export const LazyComponent = (props) => {
  let Comp = React.lazy(() => import("./" + props.folder + "/" + props.page))
  return (
    <Comp {...props} />
  )
}

export default App;
